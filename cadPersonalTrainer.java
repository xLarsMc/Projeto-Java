//Leandro Henrique Oliveira Neves - RA: 2503514

package com.mycompany.projetopessoalfinal;

import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class cadPersonalTrainer extends javax.swing.JFrame {

    private static cadPersonalTrainer cadPersonalTrainerUnico;
    
    PersonalTrainer pt = new PersonalTrainer();
    
    public cadPersonalTrainer() {
        initComponents();
        setLocationRelativeTo( null );
    }
    
    /**
     *
     * @return
     */
    public static cadPersonalTrainer getCadPersonalTrainer(){
        if(cadPersonalTrainerUnico == null){
            cadPersonalTrainerUnico = new cadPersonalTrainer();
        }
        return cadPersonalTrainerUnico;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btGpSexo = new javax.swing.ButtonGroup();
        btGpTipoPers = new javax.swing.ButtonGroup();
        msgNomeAp = new javax.swing.JLabel();
        msgCpf = new javax.swing.JLabel();
        msgSexo = new javax.swing.JLabel();
        msgIdade = new javax.swing.JLabel();
        msgTipoPers = new javax.swing.JLabel();
        msgQtdHoras = new javax.swing.JLabel();
        msgPrecoHora = new javax.swing.JLabel();
        msgDataCad = new javax.swing.JLabel();
        entNomeAp = new javax.swing.JTextField();
        entCpf = new javax.swing.JTextField();
        entIdade = new javax.swing.JTextField();
        entQtdHoras = new javax.swing.JTextField();
        entPrecHora = new javax.swing.JTextField();
        entDataCad = new javax.swing.JTextField();
        btCad = new javax.swing.JButton();
        btEdit = new javax.swing.JToggleButton();
        btConsul = new javax.swing.JToggleButton();
        btLimpar = new javax.swing.JToggleButton();
        btListAp = new javax.swing.JToggleButton();
        btSair = new javax.swing.JToggleButton();
        btExc = new javax.swing.JToggleButton();
        rdBtMasc = new javax.swing.JRadioButton();
        rdBtFem = new javax.swing.JRadioButton();
        rdBtParticular = new javax.swing.JRadioButton();
        rdBtAcad = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        msgNomeAp.setText("Nome");

        msgCpf.setText("CPF");

        msgSexo.setText("Sexo");

        msgIdade.setText("Idade");

        msgTipoPers.setText("Tipo Personal");

        msgQtdHoras.setText("Qtd. Horas. que atua");

        msgPrecoHora.setText("Preco/Hora");

        msgDataCad.setText("Data cadastro (apenas numeros)");

        entCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entCpfActionPerformed(evt);
            }
        });

        entQtdHoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entQtdHorasActionPerformed(evt);
            }
        });

        entPrecHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entPrecHoraActionPerformed(evt);
            }
        });

        btCad.setText("Cadastro");
        btCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCadActionPerformed(evt);
            }
        });

        btEdit.setText("Editar");
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btConsul.setText("Consultar");
        btConsul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsulActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btListAp.setText("Lista de Personal Trainer Cadastrados");
        btListAp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListApActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        btExc.setText("Excluir");
        btExc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcActionPerformed(evt);
            }
        });

        btGpSexo.add(rdBtMasc);
        rdBtMasc.setText("Masculino");

        btGpSexo.add(rdBtFem);
        rdBtFem.setText("Feminino");

        btGpTipoPers.add(rdBtParticular);
        rdBtParticular.setText("Particular");

        btGpTipoPers.add(rdBtAcad);
        rdBtAcad.setText("Academia");
        rdBtAcad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdBtAcadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btSair)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btListAp))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btCad)
                                .addGap(18, 18, 18)
                                .addComponent(btEdit)
                                .addGap(18, 18, 18)
                                .addComponent(btConsul)
                                .addGap(18, 18, 18)
                                .addComponent(btLimpar)
                                .addGap(18, 18, 18)
                                .addComponent(btExc)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msgIdade)
                            .addComponent(msgCpf)
                            .addComponent(msgDataCad)
                            .addComponent(msgNomeAp)
                            .addComponent(msgSexo))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdBtMasc)
                                .addGap(18, 18, 18)
                                .addComponent(rdBtFem))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(entNomeAp, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(msgQtdHoras))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(entDataCad)
                                    .addComponent(entCpf)
                                    .addComponent(entIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(msgTipoPers)
                                    .addComponent(msgPrecoHora))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(rdBtParticular)
                                .addGap(18, 18, 18)
                                .addComponent(rdBtAcad))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(entPrecHora, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(entQtdHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(entDataCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(msgCpf)
                                    .addComponent(entCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(msgNomeAp)
                                    .addComponent(entNomeAp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(msgQtdHoras)
                                    .addComponent(entQtdHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(msgTipoPers)
                                    .addComponent(rdBtParticular)
                                    .addComponent(rdBtAcad))))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(msgIdade)
                                    .addComponent(entIdade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(msgPrecoHora))
                                .addGap(18, 18, 18)
                                .addComponent(msgDataCad))
                            .addComponent(entPrecHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(msgSexo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdBtMasc)
                            .addComponent(rdBtFem))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCad)
                    .addComponent(btEdit)
                    .addComponent(btConsul)
                    .addComponent(btLimpar)
                    .addComponent(btExc))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSair)
                    .addComponent(btListAp))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entCpfActionPerformed

    private void btCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCadActionPerformed
        btCad();
        limpTudo();
    }//GEN-LAST:event_btCadActionPerformed

    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed
        btEdit();
        limpTudo();
    }//GEN-LAST:event_btEditActionPerformed

    private void btConsulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsulActionPerformed
        btConsul();
    }//GEN-LAST:event_btConsulActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
       limpTudo();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btListApActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListApActionPerformed
        listCadPersonalTrainer.getListCadPersonalTrainer().setVisible(true);
    }//GEN-LAST:event_btListApActionPerformed

    private void btExcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcActionPerformed
        btExc();
        limpTudo();
    }//GEN-LAST:event_btExcActionPerformed

    private void entQtdHorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entQtdHorasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entQtdHorasActionPerformed

    private void entPrecHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entPrecHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entPrecHoraActionPerformed

    private void rdBtAcadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdBtAcadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdBtAcadActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        fechar();
    }//GEN-LAST:event_btSairActionPerformed
    public void fechar(){
        int close = JOptionPane.showConfirmDialog(
                        null,
                        "Deseja realmente sair?",
                        "Sair",
                        JOptionPane.YES_NO_OPTION
                );
        if(close == 0){
                dispose();
        }
    }
    public void limpTudo(){
        entNomeAp.setText("");
        entCpf.setText("");
        entIdade.setText("");
        entQtdHoras.setText("");  
        entPrecHora.setText("");
        entDataCad.setText("");
        btGpTipoPers.clearSelection();
        btGpSexo.clearSelection();
    }
    public void btExc(){
        PersonalTrainer pt = new PersonalTrainer();
        try{
            pt.setCpf(Long.parseLong(entCpf.getText()));
        }catch(CpfInvException cie){
            cie.impCpfInv();
            cie.corCpfInv(pt);
        }
        catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(
                null, 
                "Seu cpf e invalido (Deve ser digitado numeros)! Digite um cpf valido.",
                "Cpf Inválido",
                1
            );
            CpfInvException cie = new CpfInvException();
            cie.corCpfInv(pt);
        }
        pt = BancoArray.getBanco().delPtCpf(pt);
        
        if(pt != null){
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer nao encontrado",
                    "Exclusao de Personal Trainer",
                    1
            );
        }
        else{
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer excluido com sucesso",
                    "Exclusao de Personal Trainer",
                    1
            );
        }
        
    }
    public void btConsul(){
        PersonalTrainer pt = new PersonalTrainer();
        try{
            pt.setCpf(Long.parseLong(entCpf.getText()));
        }catch(CpfInvException cie){
            cie.impCpfInv();
            cie.corCpfInv(pt);
        }
        catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(
                null, 
                "Seu cpf e invalido (Deve ser digitado numeros)! Digite um cpf valido.",
                "Cpf Inválido",
                1
            );
            CpfInvException cie = new CpfInvException();
            cie.corCpfInv(pt);
        }
        
        pt = BancoArray.getBanco().consPt(pt);
        
        if(pt != null){
            entNomeAp.setText(pt.getNome());
            entCpf.setText(Integer.toString((int) pt.getCpf()));
            entIdade.setText(Integer.toString(pt.getIdade()));
            entPrecHora.setText(Float.toString(pt.getPrecoHora()));
            entQtdHoras.setText(Float.toString(pt.getHoraAtuacao()));  
            entDataCad.setText(pt.getDataCadastro());
            if(pt.getSexo().equalsIgnoreCase("Masculino")){
                rdBtMasc.setSelected(true);
            }
            else if(pt.getSexo().equalsIgnoreCase("Feminino")){
                rdBtFem.setSelected(true);
            }
            if(pt.getTipoPersonal().equalsIgnoreCase("Particular")){
                rdBtParticular.setSelected(true);
            }
            else if(pt.getTipoPersonal().equalsIgnoreCase("Academia")){
                rdBtAcad.setSelected(true);
            }
            
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer encontrado com sucesso!",
                    "Consulta Personal Trainer",
                    1
            );
        }
        else{
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer não encontrado!",
                    "Consulta Personal Trainer",
                    1
            );
        }
    }
    public void btEdit(){
        PersonalTrainer  pt = new PersonalTrainer();
        
        try{
            pt.setCpf(Long.parseLong(entCpf.getText()));
        }catch(CpfInvException cie){
            cie.impCpfInv();
            cie.corCpfInv(pt);
        }
        catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(
                null, 
                "Seu cpf e invalido (Deve ser digitado numeros)! Digite um cpf valido.",
                "Cpf Inválido",
                1
            );
            CpfInvException cie = new CpfInvException();
            cie.corCpfInv(pt);
        }
        
        pt = BancoArray.getBanco().altPtCpf(pt);
        
        if(pt != null){
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer alterado!",
                    "Alteração de Personal Trainer",
                    1
            );
        }
        else{
            JOptionPane.showMessageDialog(
                    null,
                    "Personal Trainer não encontrado",
                    "Alteração de Personal Trainer",
                    1
            );
        }
    }
    public void btCad(){
        pt = new PersonalTrainer();
        
        pt.setNome(entNomeAp.getText());
        try{
            pt.setCpf(Long.parseLong(entCpf.getText()));
        }
        catch(CpfInvException cie){
            cie.impCpfInv();
            cie.corCpfInv(pt);
        }
        catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(
                null, 
                "Seu cpf e invalido (Deve ser digitado numeros)! Digite um cpf valido.",
                "Cpf Inválido",
                1
            );
            CpfInvException cie = new CpfInvException();
            cie.corCpfInv(pt);
        }
        try{
            pt.setIdade(Integer.parseInt(entIdade.getText()));
        }
        catch(NumberFormatException nfe){
            pt.setIdade(Integer.parseInt(JOptionPane.showInputDialog(
                    null,
                    "Digite uma nova idade",
                    "Idade inválida",
                    1
            )));
        }
        if(rdBtMasc.isSelected() == true){
            pt.setSexo("Masculino");
        }
        else if(rdBtFem.isSelected() == true){
            pt.setSexo("Feminino");
        }
        try{
            pt.setDataCadastro(entDataCad.getText());            
        }
        catch(DataInvException die){
            die.impDataInv();
            die.corDataInv(pt);
        }
        try{
            pt.setPrecoHora(Float.parseFloat(entPrecHora.getText()));
        }
        catch(NumberFormatException nfe){
            pt.setPrecoHora(Float.parseFloat(JOptionPane.showInputDialog(
                    null,
                    "Digite uma nova hora (numeros)",
                    "Hora inválida",
                    1
            )));
        }
        try{
            pt.setHoraAtuacao(Float.parseFloat(entQtdHoras.getText()));
        }
        catch(NumberFormatException nfe){
            pt.setHoraAtuacao(Float.parseFloat(JOptionPane.showInputDialog(
                    null,
                    "Digite um novo preco/hora (numeros)",
                    "Hora inválida",
                    1
            )));
        }
        if(rdBtAcad.isSelected() == true){
            pt.setTipoPersonal("Academia");
        }
        else if(rdBtParticular.isSelected() == true){
            pt.setTipoPersonal("Particular");
        }
        pt = BancoArray.getBanco().cadPt(pt);
        
        if(pt != null){
            JOptionPane.showMessageDialog(
                null,
                "Personal Trainer cadastrado com sucesso!",
                "Cadastro de Personal Trainer",
                1
            );
        }
        else{
            JOptionPane.showMessageDialog(
                null,
                "Personal Trainer ja cadastrado!",
                "Cadastro de Personal Trainer",
                1
            );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCad;
    private javax.swing.JToggleButton btConsul;
    private javax.swing.JToggleButton btEdit;
    private javax.swing.JToggleButton btExc;
    private javax.swing.ButtonGroup btGpSexo;
    private javax.swing.ButtonGroup btGpTipoPers;
    private javax.swing.JToggleButton btLimpar;
    private javax.swing.JToggleButton btListAp;
    private javax.swing.JToggleButton btSair;
    private javax.swing.JTextField entCpf;
    private javax.swing.JTextField entDataCad;
    private javax.swing.JTextField entIdade;
    private javax.swing.JTextField entNomeAp;
    private javax.swing.JTextField entPrecHora;
    private javax.swing.JTextField entQtdHoras;
    private javax.swing.JLabel msgCpf;
    private javax.swing.JLabel msgDataCad;
    private javax.swing.JLabel msgIdade;
    private javax.swing.JLabel msgNomeAp;
    private javax.swing.JLabel msgPrecoHora;
    private javax.swing.JLabel msgQtdHoras;
    private javax.swing.JLabel msgSexo;
    private javax.swing.JLabel msgTipoPers;
    private javax.swing.JRadioButton rdBtAcad;
    private javax.swing.JRadioButton rdBtFem;
    private javax.swing.JRadioButton rdBtMasc;
    private javax.swing.JRadioButton rdBtParticular;
    // End of variables declaration//GEN-END:variables
    public String getEntNomeAp(){
        return entNomeAp.getText();
    }
    public String getDataCad(){
        return entDataCad.getText();
    }
    public String getEntCpf(){
        return entCpf.getText();
    }
    public String getEntIdade(){
        return entIdade.getText();
    }
    public String getEntPrecoHora(){
        return entPrecHora.getText();
    }
    public String getEntQtdHora(){
        return entQtdHoras.getText();
    }
    public String getEntTipoPers(){
        if(rdBtAcad.isSelected() == true){
            return "Academia";
        }
        else if(rdBtParticular.isSelected() == true){
            return "Particular";
        }
        return null;
    }
    public String getEntSexo(){
        if(rdBtMasc.isSelected() == true){
            return "Masculino";
        }
        else if(rdBtFem.isSelected() == true){
            return "Feminino";
        }
        return null;
    }
}
